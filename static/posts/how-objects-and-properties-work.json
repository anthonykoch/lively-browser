{
  "sections": [
    {
      "content": "<p>I wrote about prototypal inheritance before and I didn’t like the way I went about it. I think it’s best to just show a live example of the most basic and simplistic version of how properties are retrieved and go from there.</p>\n<h3>What is an object?</h3>\n<p>Let’s just take a quick moment to understand what an object is. An object is a way to store data by name. We often use them to represent different things. For example, we might want an object to represent a user that contains data to be saved to a database. It could have an age, username, or favorite food.</p>\n",
      "code": "\nvar age = 123;\nvar user = {\n  username: 'musefan42',\n  age: 42,\n  favoriteFood: 'blueberry pancakes!!!',\n};\n\nuser;\n\n"
    },
    {
      "content": "<p>We get properties of an object with a dot. The dot is an operator (like the addition operator) that tells JavaScript, “Pretty please, get me the value of the property for this object.”.</p>\n",
      "code": "\nvar user = {\n  username: 'musefan42',\n  age: 42,\n  favoriteFood: 'blueberry pancakes!!!',\n};\n\nuser.favoriteFood;\n"
    },
    {
      "content": "<h4>Non-existant properties</h4>\n<p>Objects that don’t have the property you’re looking for will return undefined. Pretty simple so far.</p>\n",
      "code": "\nvar user = {\n  username: 'musefan42',\n  age: 42,\n  favoriteFood: 'blueberry pancakes!!!',\n};\n\n// user object doesn't have a firstName property.\nuser.firstName;\n"
    },
    {
      "content": "<h3>Basic property gettin’</h3>\n<p>Let’s say we want</p>\n<p>are retrieved from an object when they are non-existant, which is also named “Prototypal Inheritance”.</p>\n",
      "code": "\nvar user = {};\n\nuser.pancakes;\n\nuser.__proto__ = {\n  pancakes: 'yummmmmm!',\n};\n\nuser.pancakes;\n"
    }
  ],
  "meta": {
    "title": "How objects and properties work",
    "slug": "how-objects-and-properties-work"
  }
}